#define TEST_FILE_LINK_DEPENDENCIES "source/images/png.cpp, source/images/image.cpp"

#include "source/images/png.h"
#include "tests/test.h"

image createGradientImage(uint32_t height, uint32_t width) {
	image data(height, width);

	uint32_t heightColorMod = 65535/width;
	uint32_t widthColorMod = 65535/height;

	for(uint32_t i = 0; i < height; i++) {
		for(uint32_t j = 0; j < width; j++) {
			data.getAt(j,i).red = static_cast<uint16_t>(i * heightColorMod);
			data.getAt(j,i).green = static_cast<uint16_t>(i * j * widthColorMod/height);
			data.getAt(j,i).blue = static_cast<uint16_t>(j * widthColorMod);
			data.getAt(j,i).alpha = 0xFFFF;
		}
	}
	return data;
}

image createGrayscaleGradientImage(uint32_t height, uint32_t width) {
	image data(height, width);

	uint32_t heightColorMod = 65535/width;
	uint32_t widthColorMod = 65535/height;

	for(uint32_t i = 0; i < height; i++) {
		for(uint32_t j = 0; j < width; j++) {
			uint16_t colorValue = static_cast<uint16_t>((i * heightColorMod + j * widthColorMod)/2);
			data.getAt(j,i).red = colorValue;
			data.getAt(j,i).green = colorValue;
			data.getAt(j,i).blue = colorValue;
			data.getAt(j,i).alpha = 0xFFFF;
		}
	}
	return data;
}

TEST(PNGTest, createPNG_16bit_alpha)
{
	image data = createGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, true, 16, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x10, 0x06, 0x00, 0x00, 0x00, 0xcd, 0xe4, 0xba,
		0x59, 0x00, 0x00, 0x00, 0x2b, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0x00, 0x83, 0xff,
		0xff, 0x41, 0x64, 0xfd, 0x7f, 0x08, 0xaf, 0x01,
		0x48, 0x33, 0x87, 0x86, 0x82, 0x99, 0x0d, 0xda,
		0xda, 0xf6, 0xff, 0x1d, 0x1a, 0x18, 0x18, 0xb4,
		0xb5, 0x13, 0x1a, 0x1c, 0x18, 0x48, 0x07, 0x00,
		0xf3, 0x4d, 0x0a, 0x74, 0xc3, 0x1a, 0xde, 0x4f,
		0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44,
		0xae, 0x42, 0x60, 0x82
	};
	EXPECT_EQ(bytes, expected);
}

TEST(PNGTest, createPNG_16bit)
{
	image data = createGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, false, 16, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x10, 0x02, 0x00, 0x00, 0x00, 0x42, 0x86, 0x2d,
		0x0e, 0x00, 0x00, 0x00, 0x20, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0x80, 0x83, 0xfa,
		0xff, 0x20, 0xb2, 0xe1, 0x3f, 0x63, 0x68, 0x28,
		0x44, 0xc0, 0xfe, 0x3f, 0x48, 0xc8, 0x01, 0x28,
		0xc4, 0x40, 0x04, 0x00, 0x00, 0x90, 0x55, 0x08,
		0x25, 0x93, 0xc8, 0x49, 0x10, 0x00, 0x00, 0x00,
		0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
		0x82
	};
	EXPECT_EQ(bytes, expected);
}

TEST(PNGTest, createPNG_8bit_alpha)
{
	image data = createGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, true, 8, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x08, 0x06, 0x00, 0x00, 0x00, 0x9d, 0x74, 0x66,
		0x1a, 0x00, 0x00, 0x00, 0x1d, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0x60, 0x60, 0xf8,
		0xcf, 0xc0, 0x50, 0x0f, 0xa4, 0x1a, 0x18, 0x18,
		0x43, 0x41, 0x1c, 0x7b, 0x20, 0xc7, 0xa1, 0x81,
		0x01, 0x00, 0x3a, 0x7e, 0x04, 0xd3, 0xd4, 0xea,
		0xd3, 0x62, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
		0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
	};
	EXPECT_EQ(bytes, expected);
}

TEST(PNGTest, createPNG_8bit)
{
	image data = createGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, false, 8, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x08, 0x02, 0x00, 0x00, 0x00, 0x12, 0x16, 0xf1,
		0x4d, 0x00, 0x00, 0x00, 0x18, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0x00, 0x81, 0x7a,
		0x06, 0x86, 0x06, 0xc6, 0x50, 0x20, 0xc3, 0xbe,
		0x9e, 0xc1, 0xa1, 0x01, 0x00, 0x13, 0xd8, 0x02,
		0xd5, 0x68, 0xb8, 0x1e, 0x7f, 0x00, 0x00, 0x00,
		0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
		0x82
	};
	EXPECT_EQ(bytes, expected);
}

TEST(PNGTest, createPNG_Gray_16bit_alpha)
{
	image data = createGrayscaleGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, true, 16, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x10, 0x04, 0x00, 0x00, 0x00, 0x67, 0xed, 0x72,
		0xd2, 0x00, 0x00, 0x00, 0x21, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0x60, 0xf8, 0xff,
		0xdf, 0xfe, 0x3f, 0x03, 0x83, 0x03, 0x03, 0x03,
		0x03, 0x8b, 0xd6, 0x2a, 0x06, 0x06, 0xed, 0xd5,
		0x40, 0x0c, 0x14, 0xc0, 0x05, 0x00, 0xf5, 0x96,
		0x06, 0x56, 0x09, 0xfd, 0xfa, 0x0e, 0x00, 0x00,
		0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
		0x60, 0x82
	};
	EXPECT_EQ(bytes, expected);
}

TEST(PNGTest, createPNG_Gray_16bit)
{
	image data = createGrayscaleGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, false, 16, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x10, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x8f, 0xe5,
		0x85, 0x00, 0x00, 0x00, 0x19, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0x60, 0xb0, 0xff,
		0xef, 0xc0, 0xc0, 0xac, 0xb5, 0xca, 0xec, 0x9a,
		0xd9, 0x55, 0x06, 0x24, 0x00, 0x00, 0x4d, 0x2d,
		0x04, 0x6e, 0x3c, 0x12, 0xf5, 0x02, 0x00, 0x00,
		0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
		0x60, 0x82
	};
	EXPECT_EQ(bytes, expected);
}

TEST(PNGTest, createPNG_Gray_8bit_alpha)
{
	image data = createGrayscaleGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, true, 8, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x08, 0x04, 0x00, 0x00, 0x00, 0x37, 0x7d, 0xae,
		0x91, 0x00, 0x00, 0x00, 0x16, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0xf8, 0x6f, 0xcf,
		0xe0, 0xc0, 0xc0, 0xac, 0xd5, 0x60, 0xc6, 0x60,
		0xc6, 0x00, 0x00, 0x15, 0xda, 0x02, 0x99, 0xf4,
		0xe3, 0x1d, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x49,
		0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
	};
	EXPECT_EQ(bytes, expected);
}

TEST(PNGTest, createPNG_Gray_8bit)
{
	image data = createGrayscaleGradientImage(2, 3);
	PngImage parser;
	std::vector<uint8_t> bytes = parser.createPNG(data, false, 8, 0.001f);

	std::vector<uint8_t> expected = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
		0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
		0x08, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x1f, 0x39,
		0xc6, 0x00, 0x00, 0x00, 0x10, 0x49, 0x44, 0x41,
		0x54, 0x78, 0x9c, 0x63, 0x64, 0xb0, 0x77, 0x60,
		0xd0, 0xca, 0x5a, 0x05, 0x00, 0x04, 0xc6, 0x01,
		0xbf, 0xd5, 0x3e, 0x1f, 0x8f, 0x00, 0x00, 0x00,
		0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
		0x82
	};
	EXPECT_EQ(bytes, expected);
}

int main(int argc, char *argv[])
{
	::testing::InitGoogleTest(&argc, argv);
	StaySilentOnSuccess();
	return RUN_ALL_TESTS();
}